name: Standalone Code Generator

on:
  workflow_dispatch:
    inputs:
      project_type:
        description: 'Type of project to generate'
        required: true
        default: 'todo-app'
        type: choice
        options:
          - 'todo-app'
          - 'ecommerce'
          - 'blog'
          - 'dashboard'
      tech_stack:
        description: 'Technology stack'
        required: true
        default: 'react-node'
        type: choice
        options:
          - 'react-node'
          - 'vue-python'
          - 'svelte-rust'
          - 'next-prisma'

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm install -g bun
        bun install
        
    - name: Read input files
      id: read-inputs
      run: |
        # Create temporary files to avoid GitHub Actions output issues
        mkdir -p temp
        
        if [ -f "input/①要件定義.md" ]; then
          cp "input/①要件定義.md" temp/requirements.md
          echo "requirements_file=temp/requirements.md" >> $GITHUB_OUTPUT
        fi
        
        if [ -f "input/②技術定義.yaml" ]; then
          cp "input/②技術定義.yaml" temp/tech-spec.yaml
          echo "tech_spec_file=temp/tech-spec.yaml" >> $GITHUB_OUTPUT
        fi
        
        if [ -f "input/③v0モックアップ" ]; then
          cp "input/③v0モックアップ" temp/mockup.md
          echo "mockup_file=temp/mockup.md" >> $GITHUB_OUTPUT
        fi

    - name: Generate project with Claude
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        mkdir -p output
        
        # Read input files
        REQUIREMENTS=""
        TECH_SPEC=""
        MOCKUP=""
        
        if [ -f "temp/requirements.md" ]; then
          REQUIREMENTS=$(cat temp/requirements.md)
        fi
        
        if [ -f "temp/tech-spec.yaml" ]; then
          TECH_SPEC=$(cat temp/tech-spec.yaml)
        fi
        
        if [ -f "temp/mockup.md" ]; then
          MOCKUP=$(cat temp/mockup.md)
        fi
        
        # Create prompt for Claude
        cat > prompt.txt << 'PROMPT_EOF'
        Based on these requirements, generate a complete ${{ github.event.inputs.project_type }} project with ${{ github.event.inputs.tech_stack }} tech stack.

        Please provide a complete project structure with all necessary files. Format your response with clear file separators like:
        
        === filename.ext ===
        [file content]
        === END ===

        Requirements:
PROMPT_EOF
        
        echo "$REQUIREMENTS" >> prompt.txt
        echo -e "\n\nTech Spec:" >> prompt.txt
        echo "$TECH_SPEC" >> prompt.txt
        echo -e "\n\nMockup:" >> prompt.txt
        echo "$MOCKUP" >> prompt.txt
        echo -e "\n\nGenerate complete project structure with all necessary files including package.json, Dockerfile, source code, and documentation." >> prompt.txt
        
        # Call Claude API
        curl -X POST "https://api.anthropic.com/v1/messages" \
          -H "Content-Type: application/json" \
          -H "x-api-key: $CLAUDE_API_KEY" \
          -H "anthropic-version: 2023-06-01" \
          -d @- << API_EOF > claude_response.json
        {
          "model": "claude-3-sonnet-20240229",
          "max_tokens": 8000,
          "messages": [{
            "role": "user",
            "content": $(cat prompt.txt | jq -Rs .)
          }]
        }
API_EOF
        
        # Extract and create files from Claude response
        node -e "
          const fs = require('fs');
          try {
            const response = JSON.parse(fs.readFileSync('claude_response.json'));
            const content = response.content[0].text;
            console.log('Claude response received:', content.substring(0, 200) + '...');
            
            // Extract files using === filename === pattern
            const filePattern = /=== ([^=]+) ===\n([\s\S]*?)\n=== END ===/g;
            let match;
            let fileCount = 0;
            
            while ((match = filePattern.exec(content)) !== null) {
              const filename = match[1].trim();
              const fileContent = match[2];
              
              const fullPath = \`output/\${filename}\`;
              const dir = fullPath.split('/').slice(0, -1).join('/');
              
              if (dir && dir !== 'output') {
                fs.mkdirSync(dir, { recursive: true });
              }
              
              fs.writeFileSync(fullPath, fileContent);
              console.log(\`Created: \${fullPath}\`);
              fileCount++;
            }
            
            if (fileCount === 0) {
              console.log('No files extracted, creating basic structure...');
              // Fallback: create basic files
              fs.writeFileSync('output/package.json', JSON.stringify({
                name: '${{ github.event.inputs.project_type }}',
                version: '1.0.0',
                main: 'index.js',
                scripts: { start: 'node index.js' }
              }, null, 2));
              
              fs.writeFileSync('output/index.js', 'console.log(\"Hello World!\");');
              fs.writeFileSync('output/README.md', '# Generated Project\n\nThis project was generated automatically.');
            }
            
            console.log(\`Total files created: \${fileCount}\`);
          } catch (error) {
            console.error('Error processing Claude response:', error);
            process.exit(1);
          }
        "

    - name: Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Build and deploy
      run: |
        cd output
        
        # Docker build
        if [ -f "Dockerfile" ]; then
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/generated-app .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/generated-app
          
          # Deploy to Cloud Run
          gcloud run deploy generated-app \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/generated-app \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated
        fi
        
    - name: Commit generated files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add output/
        git commit -m "Generated ${{ github.event.inputs.project_type }} project with ${{ github.event.inputs.tech_stack }}" || exit 0
        git push
        
    - name: Create summary
      run: |
        echo "## 🚀 Project Generation Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project Type:** ${{ github.event.inputs.project_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tech Stack:** ${{ github.event.inputs.tech_stack }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
        find output/ -type f | head -20 >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
        if gcloud run services describe generated-app --region=us-central1 2>/dev/null; then
          echo "✅ Deployed to Cloud Run" >> $GITHUB_STEP_SUMMARY
          echo "🔗 URL: $(gcloud run services describe generated-app --region=us-central1 --format='value(status.url)')" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Deployment failed or skipped" >> $GITHUB_STEP_SUMMARY
        fi
