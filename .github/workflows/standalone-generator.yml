name: Standalone Code Generator (OAuth)

on:
  workflow_dispatch:
    inputs:
      project_type:
        description: 'Type of project to generate'
        required: true
        default: 'todo-app'
        type: choice
        options:
          - 'todo-app'
          - 'ecommerce'
          - 'blog'
          - 'dashboard'
      tech_stack:
        description: 'Technology stack'
        required: true
        default: 'react-node'
        type: choice
        options:
          - 'react-node'
          - 'vue-python'
          - 'svelte-rust'
          - 'next-prisma'

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm install -g bun
        bun install || npm install
        
    - name: Read input files
      id: read-inputs
      run: |
        # Create temporary files to avoid GitHub Actions output issues
        mkdir -p temp
        
        if [ -f "input/‚ë†Ë¶Å‰ª∂ÂÆöÁæ©.md" ]; then
          cp "input/‚ë†Ë¶Å‰ª∂ÂÆöÁæ©.md" temp/requirements.md
          echo "requirements_file=temp/requirements.md" >> $GITHUB_OUTPUT
          echo "‚úÖ Requirements file found"
        else
          echo "‚ö†Ô∏è Requirements file not found"
        fi
        
        if [ -f "input/‚ë°ÊäÄË°ìÂÆöÁæ©.yaml" ]; then
          cp "input/‚ë°ÊäÄË°ìÂÆöÁæ©.yaml" temp/tech-spec.yaml
          echo "tech_spec_file=temp/tech-spec.yaml" >> $GITHUB_OUTPUT
          echo "‚úÖ Tech spec file found"
        else
          echo "‚ö†Ô∏è Tech spec file not found"
        fi
        
        if [ -f "input/‚ë¢v0„É¢„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó" ]; then
          cp "input/‚ë¢v0„É¢„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó" temp/mockup.md
          echo "mockup_file=temp/mockup.md" >> $GITHUB_OUTPUT
          echo "‚úÖ Mockup file found"
        else
          echo "‚ö†Ô∏è Mockup file not found"
        fi

    - name: Generate project with Claude (OAuth)
      env:
        CLAUDE_CLIENT_ID: ${{ secrets.CLAUDE_CLIENT_ID }}
        CLAUDE_CLIENT_SECRET: ${{ secrets.CLAUDE_CLIENT_SECRET }}
      run: |
        mkdir -p output
        
        # Read input files
        REQUIREMENTS=""
        TECH_SPEC=""
        MOCKUP=""
        
        if [ -f "temp/requirements.md" ]; then
          REQUIREMENTS=$(cat temp/requirements.md)
          echo "üìã Requirements loaded"
        fi
        
        if [ -f "temp/tech-spec.yaml" ]; then
          TECH_SPEC=$(cat temp/tech-spec.yaml)
          echo "‚öôÔ∏è Tech spec loaded"
        fi
        
        if [ -f "temp/mockup.md" ]; then
          MOCKUP=$(cat temp/mockup.md)
          echo "üé® Mockup loaded"
        fi
        
        # Function to get fresh OAuth token
        get_oauth_token() {
          echo "üîê Getting fresh OAuth token..."
          
          # Try client_credentials grant
          TOKEN_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST "https://api.anthropic.com/v1/oauth/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLAUDE_CLIENT_ID&client_secret=$CLAUDE_CLIENT_SECRET")
          
          # Extract HTTP status and response body
          HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "OAuth HTTP Status: $HTTP_STATUS"
          echo "OAuth Response: $RESPONSE_BODY"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            ACCESS_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token // empty')
            
            if [ -n "$ACCESS_TOKEN" ] && [ "$ACCESS_TOKEN" != "null" ]; then
              echo "‚úÖ OAuth token obtained successfully"
              return 0
            fi
          fi
          
          echo "‚ùå Failed to get OAuth token"
          return 1
        }
        
        # Function to call Claude API with retry logic
        call_claude_api() {
          local attempt=1
          local max_attempts=3
          
          while [ $attempt -le $max_attempts ]; do
            echo "ü§ñ Calling Claude API (attempt $attempt/$max_attempts)..."
            
            if get_oauth_token; then
              # Create prompt for Claude
              cat > prompt.txt << 'PROMPT_EOF'
Based on these requirements, generate a complete ${{ github.event.inputs.project_type }} project with ${{ github.event.inputs.tech_stack }} tech stack.

Please provide a complete project structure with all necessary files. Format your response with clear file separators like:

=== filename.ext ===
[file content]
=== END ===

Requirements:
PROMPT_EOF
              
              echo "$REQUIREMENTS" >> prompt.txt
              echo -e "\n\nTech Spec:" >> prompt.txt
              echo "$TECH_SPEC" >> prompt.txt
              echo -e "\n\nMockup:" >> prompt.txt
              echo "$MOCKUP" >> prompt.txt
              echo -e "\n\nGenerate complete project structure with all necessary files including package.json, Dockerfile, source code, and documentation." >> prompt.txt
              
              # Call Claude API with OAuth token
              HTTP_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST "https://api.anthropic.com/v1/messages" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "anthropic-version: 2023-06-01" \
                -d @- << 'API_EOF'
{
  "model": "claude-3-sonnet-20240229",
  "max_tokens": 8000,
  "messages": [{
    "role": "user",
    "content": "$(cat prompt.txt | jq -Rs .)"
  }]
}
API_EOF
              )
              
              # Extract HTTP status and response body
              HTTP_STATUS=$(echo "$HTTP_RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
              RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
              
              echo "Claude API HTTP Status: $HTTP_STATUS"
              
              # Save response to file
              echo "$RESPONSE_BODY" > claude_response.json
              
              if [ "$HTTP_STATUS" = "200" ]; then
                # Check for API errors in response
                if echo "$RESPONSE_BODY" | jq -e '.error' > /dev/null 2>&1; then
                  echo "‚ùå Claude API returned error:"
                  echo "$RESPONSE_BODY" | jq '.error'
                  attempt=$((attempt + 1))
                  sleep 5
                  continue
                fi
                
                echo "‚úÖ Claude API call successful"
                return 0
              elif [ "$HTTP_STATUS" = "401" ]; then
                echo "‚ùå Authentication failed (401), retrying with fresh token..."
                attempt=$((attempt + 1))
                sleep 5
                continue
              else
                echo "‚ùå API call failed with status $HTTP_STATUS"
                echo "Response: $RESPONSE_BODY"
                attempt=$((attempt + 1))
                sleep 5
                continue
              fi
            else
              echo "‚ùå Failed to get OAuth token"
              attempt=$((attempt + 1))
              sleep 5
            fi
          done
          
          echo "‚ùå All OAuth attempts failed"
          return 1
        }
        
        # Execute Claude API call with retry logic
        if call_claude_api; then
          echo "‚úÖ Successfully got response from Claude"
          
          # Extract and create files from Claude response
          if [ -f "claude_response.json" ] && jq -e '.content[0].text' claude_response.json > /dev/null 2>&1; then
            node -e "
              const fs = require('fs');
              try {
                const response = JSON.parse(fs.readFileSync('claude_response.json'));
                const content = response.content[0].text;
                console.log('Claude response received:', content.substring(0, 200) + '...');
                
                // Extract files using === filename === pattern
                const filePattern = /=== ([^=]+) ===\n([\s\S]*?)\n=== END ===/g;
                let match;
                let fileCount = 0;
                
                while ((match = filePattern.exec(content)) !== null) {
                  const filename = match[1].trim();
                  const fileContent = match[2];
                  
                  const fullPath = \`output/\${filename}\`;
                  const dir = fullPath.split('/').slice(0, -1).join('/');
                  
                  if (dir && dir !== 'output') {
                    fs.mkdirSync(dir, { recursive: true });
                  }
                  
                  fs.writeFileSync(fullPath, fileContent);
                  console.log(\`Created: \${fullPath}\`);
                  fileCount++;
                }
                
                if (fileCount > 0) {
                  console.log(\`‚úÖ Total files created from Claude: \${fileCount}\`);
                } else {
                  console.log('‚ö†Ô∏è No files extracted from Claude response');
                  throw new Error('No files found in Claude response');
                }
              } catch (error) {
                console.error('Error processing Claude response:', error);
                throw error;
              }
            " || {
              echo "‚ùå Failed to extract files from Claude response, using fallback"
              FALLBACK_NEEDED=true
            }
          else
            echo "‚ùå Invalid Claude response format, using fallback"
            FALLBACK_NEEDED=true
          fi
        else
          echo "‚ùå Failed to get response from Claude, using fallback"
          FALLBACK_NEEDED=true
        fi
        
        # Create minimal project structure as fallback if needed
        if [ "$FALLBACK_NEEDED" = "true" ] || [ ! -f "output/package.json" ]; then
          echo "üîÑ Creating fallback React Todo app..."
          
          mkdir -p output/src output/public
          
          cat > output/package.json << 'PKG_EOF'
{
  "name": "simple-todo-app",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
PKG_EOF
          
          cat > output/src/App.js << 'APP_EOF'
import React, { useState } from 'react';
import './App.css';

function App() {
  const [todos, setTodos] = useState([]);
  const [input, setInput] = useState('');

  const addTodo = () => {
    if (input.trim()) {
      setTodos([...todos, { id: Date.now(), text: input, completed: false }]);
      setInput('');
    }
  };

  const toggleTodo = (id) => {
    setTodos(todos.map(todo => 
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  const deleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>üóÇÔ∏è My Todo App</h1>
      </header>
      <main className="App-main">
        <div className="todo-input">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addTodo()}
            placeholder="‚ûï Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†..."
          />
          <button onClick={addTodo}>ËøΩÂä†</button>
        </div>
        <div className="todo-stats">
          <span>üìä ÂêàË®à: {todos.length}„Çø„Çπ„ÇØ | Êú™ÂÆå‰∫Ü: {todos.filter(t => !t.completed).length} | ÂÆå‰∫Ü: {todos.filter(t => t.completed).length}</span>
        </div>
        <ul className="todo-list">
          {todos.map(todo => (
            <li key={todo.id} className={todo.completed ? 'completed' : ''}>
              <input
                type="checkbox"
                checked={todo.completed}
                onChange={() => toggleTodo(todo.id)}
              />
              <span className="todo-text">{todo.text}</span>
              <button onClick={() => deleteTodo(todo.id)} className="delete-btn">ÂâäÈô§</button>
            </li>
          ))}
        </ul>
        {todos.length === 0 && (
          <div className="empty-state">
            <p>üìù „Çø„Çπ„ÇØ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰∏äË®ò„Åã„ÇâÊñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
APP_EOF
          
          cat > output/src/App.css << 'CSS_EOF'
        .App {
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
          min-height: 100vh;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .App-header {
          text-align: center;
          margin-bottom: 30px;
        }

        .App-header h1 {
          color: white;
          font-size: 2.5rem;
          margin: 0;
          text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .App-main {
          background: white;
          border-radius: 12px;
          padding: 30px;
          box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .todo-input {
          display: flex;
          gap: 12px;
          margin-bottom: 20px;
        }

        .todo-input input {
          flex: 1;
          padding: 14px 16px;
          border: 2px solid #e2e8f0;
          border-radius: 8px;
          font-size: 16px;
          transition: border-color 0.3s ease;
        }

        .todo-input input:focus {
          outline: none;
          border-color: #667eea;
          box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .todo-input button {
          padding: 14px 24px;
          background: #667eea;
          color: white;
          border: none;
          border-radius: 8px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: background-color 0.3s ease;
        }

        .todo-input button:hover {
          background: #5a67d8;
        }

        .todo-stats {
          background: #f7fafc;
          padding: 12px 16px;
          border-radius: 8px;
          margin-bottom: 20px;
          font-size: 14px;
          color: #4a5568;
          border-left: 4px solid #667eea;
        }

        .todo-list {
          list-style: none;
          padding: 0;
          margin: 0;
        }

        .todo-list li {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 16px;
          border: 1px solid #e2e8f0;
          margin-bottom: 8px;
          border-radius: 8px;
          background: #fafafa;
          transition: all 0.3s ease;
        }

        .todo-list li:hover {
          background: #f0f4f8;
          transform: translateY(-1px);
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .todo-list li.completed {
          opacity: 0.7;
          background: #f0fff4;
          border-color: #9ae6b4;
        }

        .todo-list li.completed .todo-text {
          text-decoration: line-through;
          color: #68d391;
        }

        .todo-text {
          flex: 1;
          font-size: 16px;
          line-height: 1.5;
        }

        .delete-btn {
          background: #e53e3e;
          color: white;
          border: none;
          padding: 8px 16px;
          border-radius: 6px;
          font-size: 14px;
          cursor: pointer;
          transition: background-color 0.3s ease;
        }

        .delete-btn:hover {
          background: #c53030;
        }

        .empty-state {
          text-align: center;
          padding: 40px 20px;
          color: #718096;
          font-size: 16px;
        }

        input[type="checkbox"] {
          width: 20px;
          height: 20px;
          cursor: pointer;
        }
CSS_EOF
          
          cat > output/src/index.js << 'INDEX_EOF'
        import React from 'react';
        import ReactDOM from 'react-dom/client';
        import './index.css';
        import App from './App';

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(
          <React.StrictMode>
            <App />
          </React.StrictMode>
        );
INDEX_EOF
          
          cat > output/src/index.css << 'ICSS_EOF'
        * {
          box-sizing: border-box;
        }

        body {
          margin: 0;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
            sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
          background-color: #f7fafc;
        }

        code {
          font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
            monospace;
        }
ICSS_EOF
          
          cat > output/public/index.html << 'HTML_EOF'
        <!DOCTYPE html>
        <html lang="ja">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta name="theme-color" content="#667eea" />
            <meta name="description" content="„Ç∑„É≥„Éó„É´„Å™„Çø„Çπ„ÇØÁÆ°ÁêÜ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥" />
            <title>üóÇÔ∏è My Todo App</title>
          </head>
          <body>
            <noscript>JavaScript„ÇíÊúâÂäπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</noscript>
            <div id="root"></div>
          </body>
        </html>
HTML_EOF
          
          cat > output/Dockerfile << 'DOCKER_EOF'
        # Build stage
        FROM node:18-alpine as build

        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production

        COPY public ./public
        COPY src ./src
        RUN npm run build

        # Production stage
        FROM nginx:alpine

        COPY --from=build /app/build /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/nginx.conf

        EXPOSE 80

        CMD ["nginx", "-g", "daemon off;"]
DOCKER_EOF
          
          cat > output/nginx.conf << 'NGINX_EOF'
        events {
            worker_connections 1024;
        }

        http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;
            
            sendfile        on;
            keepalive_timeout  65;

            server {
                listen       80;
                server_name  localhost;
                root   /usr/share/nginx/html;
                index  index.html index.htm;

                location / {
                    try_files $uri $uri/ /index.html;
                }

                location /static/ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }
            }
        }
NGINX_EOF
          
          cat > output/README.md << 'README_EOF'
        # üóÇÔ∏è Simple Todo App

        „Ç∑„É≥„Éó„É´„ÅßÁæé„Åó„ÅÑ„Çø„Çπ„ÇØÁÆ°ÁêÜ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥

        ## ‚ú® Ê©üËÉΩ

        - ‚úÖ „Çø„Çπ„ÇØ„ÅÆËøΩÂä†„ÉªÂâäÈô§„ÉªÁ∑®ÈõÜ
        - üîÑ „Çø„Çπ„ÇØ„ÅÆÂÆå‰∫ÜÁä∂ÊÖãÁÆ°ÁêÜ
        - üìä „Çø„Çπ„ÇØÁµ±Ë®à„ÅÆË°®Á§∫
        - üé® „É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥
        - üåà Áæé„Åó„ÅÑ„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥ UI

        ## üöÄ ‰Ωø„ÅÑÊñπ

        ### ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆÂÆüË°å

        ```bash
        npm install
        npm start
        ```

        „Éñ„É©„Ç¶„Ç∂„Åß http://localhost:3000 „ÇíÈñã„Åç„Åæ„Åô„ÄÇ

        ### Êú¨Áï™„Éì„É´„Éâ

        ```bash
        npm run build
        ```

        ### Docker „Åß„ÅÆÂÆüË°å

        ```bash
        docker build -t todo-app .
        docker run -p 80:80 todo-app
        ```

        ## üõ†Ô∏è ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ

        - **„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ**: React 18
        - **„Çπ„Çø„Ç§„É™„É≥„Ç∞**: CSS3 („Ç´„Çπ„Çø„É†)
        - **„Éì„É´„Éâ„ÉÑ„Éº„É´**: Create React App
        - **„Éá„Éó„É≠„Ç§**: Docker + Nginx

        ## üì± „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú

        - „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó
        - „Çø„Éñ„É¨„ÉÉ„Éà  
        - „Çπ„Éû„Éº„Éà„Éï„Ç©„É≥

        ## üé® UI/UX ÁâπÂæ¥

        - „É¢„ÉÄ„É≥„Å™„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥„Éá„Ç∂„Ç§„É≥
        - „Çπ„É†„Éº„Ç∫„Å™„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        - Áõ¥ÊÑüÁöÑ„Å™Êìç‰ΩúÊÄß
        - Êó•Êú¨Ë™ûÂØæÂøú

        ---

        **„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü ü§ñ**
README_EOF
          
          echo "‚úÖ Fallback React Todo app created successfully"
        fi

    - name: Setup Google Cloud (if deploying)
      if: contains(github.event.inputs.tech_stack, 'node') || contains(github.event.inputs.tech_stack, 'react')
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Build and deploy to Google Cloud Run
      if: contains(github.event.inputs.tech_stack, 'node') || contains(github.event.inputs.tech_stack, 'react')
      run: |
        cd output
        
        # Check if we have a Dockerfile
        if [ -f "Dockerfile" ]; then
          echo "üê≥ Building Docker image..."
          
          # Build and push Docker image
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/generated-app .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/generated-app
          
          # Deploy to Cloud Run
          echo "üöÄ Deploying to Cloud Run..."
          gcloud run deploy generated-app \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/generated-app \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 80 \
            --memory 512Mi \
            --cpu 1
            
          # Get deployment URL
          DEPLOY_URL=$(gcloud run services describe generated-app --region=us-central1 --format='value(status.url)')
          echo "‚úÖ Deployed to: $DEPLOY_URL"
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è No Dockerfile found, skipping deployment"
        fi
        
    - name: Commit generated files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all generated files
        git add output/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ö†Ô∏è No changes to commit"
        else
          git commit -m "ü§ñ Generated ${{ github.event.inputs.project_type }} project with ${{ github.event.inputs.tech_stack }} stack

          Generated by OAuth Standalone Pipeline
          - Project type: ${{ github.event.inputs.project_type }}
          - Tech stack: ${{ github.event.inputs.tech_stack }}
          - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          git push
          echo "‚úÖ Changes committed and pushed"
        fi
        
    - name: Create summary
      run: |
        echo "## üöÄ Project Generation Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project Type:** ${{ github.event.inputs.project_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tech Stack:** ${{ github.event.inputs.tech_stack }}" >> $GITHUB_STEP_SUMMARY
        echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìÅ Generated Files:" >> $GITHUB_STEP_SUMMARY
        if [ -d "output" ]; then
          find output/ -type f | head -20 | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          
          FILE_COUNT=$(find output/ -type f | wc -l)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total files generated:** $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå No output directory found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Deployment Status:" >> $GITHUB_STEP_SUMMARY
        if [ -n "$DEPLOY_URL" ]; then
          echo "‚úÖ **Successfully deployed to Google Cloud Run**" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Live URL:** [$DEPLOY_URL]($DEPLOY_URL)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Deployment was skipped or failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üõ†Ô∏è Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the generated files in the \`output/\` directory" >> $GITHUB_STEP_SUMMARY
        echo "2. Review the code quality and functionality" >> $GITHUB_STEP_SUMMARY
        echo "3. Test the deployed application (if deployed)" >> $GITHUB_STEP_SUMMARY
        echo "4. Make any necessary customizations" >> $GITHUB_STEP_SUMMARY
